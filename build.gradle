buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT"
    }
}

apply plugin: "forge"

project.ext.buildnumber = ""
if (System.getenv().BUILD_NUMBER) project.buildnumber = "-build." + System.getenv().BUILD_NUMBER

version = "1.7.10-1.0.0-alpha.1" + project.buildnumber
group = "net.angrypixel"
archivesBaseName = "TheBetweenlands"
sourceCompatibility = targetCompatibility = "1.7"

minecraft {
    version = "1.7.10-10.13.4.1558-1.7.10"
    runDir = "minecraft"
    replace "${version}", project.version
    replace "/*!*/true/*!*/", "false"
}

configurations {
    include
}

sourceSets {
    main {
        output.resourcesDir = output.classesDir
        java { 
            srcDir "java" 
        }
        resources { 
            srcDir "resources"
        }
    }
}

repositories {
    mavenCentral()
    maven {
        name = "ilexiconn"
        url = "http://maven.ilexiconn.net/"
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from (sourceSets.main.resources.srcDirs) {
        include "mcmod.info"
        expand "version":project.version, "mcversion":project.minecraft.version
    }

    from (sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

jar {
    classifier = "universal"
    from configurations.include.collect { it.isDirectory() ? it : zipTree(it) }
    manifest {
        attributes ("FMLCorePlugin": "thebetweenlands.core.TheBetweenlandsLoadingPlugin")
        attributes ("FMLCorePluginContainsFMLMod": "true")
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "src"
    from sourceSets.main.allSource
}

task devJar(type: Jar) {
    classifier = "dev"
    from sourceSets.main.output
}

artifacts {
    archives sourcesJar, devJar
}
